// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	//Mux16(a=in, b=t1, sel=load, out=t1, out=m1);
	//RAM16K(in=in, load=load, address=address, out=out);
	
	DMux4Way(in=load, sel=address[13..14], a=d0, b=d1, c=d2, d=d3);
	
	Or(a=d0, b=d1, out=lora);
	
	RAM16K(in=in, load=lora, address=address[0..13], out=ra0);
	Screen(in=in, load=d2, address=address[0..12], out=sc0);
	Keyboard(out=k0);
	
	Mux4Way16(a=ra0, b=ra0, c=sc0, d=k0, sel=address[13..14], out=out);
}
